trigger:
  branches:
    include:
      - main

# This matches your current setup
pool:
  name: my-agent-2   # VMSS-based agent pool

variables:
  # Variable groups you already use
  - group: kv-secrets            # must include: StorageAccountSasToken
  - group: deployment-settings   # must include: storageAccountName, storageContainer

  # Local variables
  - name: buildDir
    value: 'build-artifacts'
  - name: artifactName
    value: 'flask-app.zip'
  - name: blobPrefix
    value: 'flask/$(Build.SourceBranchName)/$(Build.BuildNumber)'

stages:
- stage: Build
  displayName: 'Build & Package'
  jobs:
  - job: Build
    displayName: 'Zip Flask app and publish'
    steps:
      - script: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y zip
          echo "Preparing build dir: $(buildDir)"
          rm -rf "$(buildDir)"
          mkdir -p "$(buildDir)"

          # Zip only the app assets we need on the VM
          zip -r "$(buildDir)/$(artifactName)" app.py templates static

          # (Optional) generate a minimal requirements.txt if not present
          if [ ! -f requirements.txt ]; then
            echo "flask" > "$(buildDir)/requirements.txt"
          else
            cp requirements.txt "$(buildDir)/requirements.txt"
          fi

          # Manifest to help CD & audits
          cat > "$(buildDir)/artifact-info.json" <<EOF
          {
            "app":"flask-tictactoe",
            "artifact":"$(artifactName)",
            "branch":"$(Build.SourceBranchName)",
            "buildId":"$(Build.BuildId)",
            "buildNumber":"$(Build.BuildNumber)",
            "blobPrefix":"$(blobPrefix)",
            "storageAccount":"$(storageAccountName)",
            "container":"$(storageContainer)"
          }
          EOF

          ls -la "$(buildDir)"
        displayName: 'Create zip + manifest'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact to pipeline'
        inputs:
          PathtoPublish: '$(buildDir)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

- stage: UploadToBlob
  displayName: 'Upload to Azure Blob'
  dependsOn: Build
  jobs:
  - job: Upload
    steps:
      - task: AzureCLI@2
        displayName: 'Assign Storage Blob Data Contributor to this service connection'
        inputs:
        azureSubscription: 'HTS-L2-CS002-ARM-SC'   # must have Owner/User Access Administrator
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          ACCOUNT="$(storageAccountName)"

          # Scope: storage account resource ID
          SCOPE=$(az storage account show -n "$ACCOUNT" --query id -o tsv)

          # Get current service principal IDs (do NOT echo them)
          APPID=$(az account show --query "user.name" -o tsv)             # client/app id
          SP_OBJECTID=$(az ad sp show --id "$APPID" --query id -o tsv)    # object id

          # Check if role already assigned
          HAS=$(az role assignment list \
                  --assignee-object-id "$SP_OBJECTID" \
                  --scope "$SCOPE" \
                  --query "[?roleDefinitionName=='Storage Blob Data Contributor'] | length(@)" -o tsv)

          if [ "${HAS:-0}" -eq 0 ]; then
            echo "Granting Storage Blob Data Contributor on $SCOPE"
            az role assignment create \
              --assignee-object-id "$SP_OBJECTID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Contributor" \
              --scope "$SCOPE" >/dev/null
          else
            echo "Role already present; skipping."
          fi

          # Wait a bit for propagation
          echo "Waiting for RBAC propagation..."
          sleep 20
          
      - task: AzureCLI@2
        displayName: 'Upload zip + manifest to Blob (SAS)'
        inputs:
          azureSubscription: 'HTS-L2-CS002-ARM-SC'   # your service connection
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            set -euo pipefail

            echo "Ensuring container exists..."
            az storage container create \
              --account-name "$(storageAccountName)" \
              --name "$(storageContainer)" \
              --sas-token "$(StorageAccountSasToken)" >/dev/null

            echo "Uploading to $(blobPrefix)/ ..."
            az storage blob upload \
              --account-name "$(storageAccountName)" \
              --container-name "$(storageContainer)" \
              --name "$(blobPrefix)/$(artifactName)" \
              --file "$(buildDir)/$(artifactName)" \
              --sas-token "$(StorageAccountSasToken)" \
              --overwrite

            az storage blob upload \
              --account-name "$(storageAccountName)" \
              --container-name "$(storageContainer)" \
              --name "$(blobPrefix)/artifact-info.json" \
              --file "$(buildDir)/artifact-info.json" \
              --sas-token "$(StorageAccountSasToken)" \
              --overwrite

            # Upload requirements.txt too
            az storage blob upload \
              --account-name "$(storageAccountName)" \
              --container-name "$(storageContainer)" \
              --name "$(blobPrefix)/requirements.txt" \
              --file "$(buildDir)/requirements.txt" \
              --sas-token "$(StorageAccountSasToken)" \
              --overwrite

            echo "Done:"
            echo "https://$(storageAccountName).blob.core.windows.net/$(storageContainer)/$(blobPrefix)/"