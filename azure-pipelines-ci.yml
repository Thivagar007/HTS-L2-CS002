trigger:
  branches:
    include:
      - main

pool:
  name: my-agent-2   # use the pool you actually have

variables:
  - group: kv-secrets
  - group: deployment-settings
  - name: buildDir
    value: 'build-artifacts'
  - name: jdkPath
    value: '/usr/lib/jvm/java-17-openjdk-amd64'  # Ubuntu path for OpenJDK 17

stages:
- stage: Build
  displayName: 'Build and Package'
  jobs:
  - job: Build
    displayName: 'Build Java App'
    pool:
      name: my-agent-2
      demands:
        - agent.os -equals Linux

    steps:
    - script: |
        set -e
        echo "Installing JDK 17..."
        sudo apt-get update -y
        sudo apt-get install -y openjdk-17-jdk
        java -version
      displayName: 'Install JDK'

    - task: Maven@3
      displayName: 'Build with Maven'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        options: '-DskipTests=false'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        jdkVersionOption: 'path'
        jdkDirectory: '$(jdkPath)'

    - script: |
        set -e
        echo "Build output (target/):"
        ls -la target || true
        JAR_FILE=$(find target -type f -name "*.jar" | head -1)
        if [ -z "$JAR_FILE" ]; then
          echo "No JAR found under target/"
          exit 1
        fi
        echo "##vso[task.setvariable variable=JAR_PATH]$JAR_FILE"
        echo "Using JAR file: $JAR_FILE"
      displayName: 'Capture JAR path'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish JAR artifact'
      inputs:
        PathtoPublish: '$(JAR_PATH)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: ArchiveFiles@2
      displayName: 'Zip app JAR'
      inputs:
        rootFolderOrFile: '$(JAR_PATH)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(buildDir)/$(artifactName)'
        replaceExistingArchive: true

    - script: |
        set -e

        echo "Preparing AzCopy..."
        mkdir -p /tmp/azcopy
        cd /tmp/azcopy
        curl -sL https://aka.ms/downloadazcopy-v10-linux -o azcopy.tar.gz
        tar -xzf azcopy.tar.gz --strip-components=1
        chmod +x azcopy

        # Normalize SAS (strip leading '?' if present)
        SAS="$(StorageAccountSasToken)"
        SAS="${SAS#\?}"

        SRC_FILE="$(Build.SourcesDirectory)/$(buildDir)/$(artifactName)"
        DEST_BASE="https://$(storageAccountName).blob.core.windows.net/$(storageContainer)/$(blobPrefix)/$(artifactName)"
        DEST_URL="${DEST_BASE}?${SAS}"

        echo "Uploading to: ${DEST_BASE} (SAS hidden)"
        ./azcopy copy "$SRC_FILE" "$DEST_URL" --overwrite=true

        echo "Upload complete."
      displayName: 'Upload zip to Azure Blob (AzCopy)'