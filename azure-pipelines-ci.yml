trigger:
  branches:
    include:
      - main

pool:
  name: my-agent-2         # your VMSS-based agent pool

variables:
  - group: deployment-settings  # provides: storageAccountName, storageContainer, azureServiceConnection
  - name: buildDir
    value: 'build-artifacts'
  - name: artifactName
    value: 'flask-app.zip'
  # Versioned path helps DR traceability: branch/buildNumber
  - name: blobPrefix
    value: 'flask/$(Build.SourceBranchName)/$(Build.BuildNumber)'

stages:
- stage: Build
  displayName: 'Build & Package'
  jobs:
  - job: Build
    displayName: 'Zip app and publish'
    steps:
      - bash: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y zip

          rm -rf "$(buildDir)"
          mkdir -p "$(buildDir)"

          echo "Zipping app assets..."
          # Adjust paths if your entry points differ
          zip -r "$(buildDir)/$(artifactName)" app.py templates static

          # Include requirements.txt (generate minimal if missing)
          if [ -f requirements.txt ]; then
            cp requirements.txt "$(buildDir)/requirements.txt"
          else
            echo "flask" > "$(buildDir)/requirements.txt"
          fi

          # Write a manifest (useful for CD and DR audit)
          cat > "$(buildDir)/artifact-info.json" <<EOF
          {
            "app": "flask-tictactoe",
            "artifact": "$(artifactName)",
            "branch": "$(Build.SourceBranchName)",
            "buildId": "$(Build.BuildId)",
            "buildNumber": "$(Build.BuildNumber)",
            "blobPrefix": "$(blobPrefix)",
            "storageAccount": "$(storageAccountName)",
            "container": "$(storageContainer)"
          }
          EOF

          echo "Build directory contents:"
          ls -la "$(buildDir)"
        displayName: 'Create zip + manifest'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact to pipeline'
        inputs:
          PathtoPublish: '$(buildDir)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

- stage: UploadToBlob
  displayName: 'Upload to Azure Blob (RBAC)'
  dependsOn: Build
  jobs:
  - job: Upload
    displayName: 'Ensure AZ CLI + Upload with RBAC'
    steps:
      # Ensure Azure CLI is present on the self-hosted agent
      - bash: |
          set -euo pipefail
          if ! command -v az >/dev/null 2>&1; then
            echo "Installing Azure CLI..."
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg
            curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg >/dev/null
            AZ_DIST=$(lsb_release -cs)
            echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ ${AZ_DIST} main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
            sudo apt-get update -y
            sudo apt-get install -y azure-cli
          fi
          az version
        displayName: 'Install Azure CLI (if missing)'

      - task: AzureCLI@2
        displayName: 'Upload zip + manifest to Blob using RBAC'
        inputs:
          azureSubscription: '$(azureServiceConnection)'   # Service Connection with RBAC access
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            set -euo pipefail

            ACCOUNT="$(storageAccountName)"
            CONTAINER="$(storageContainer)"
            PREFIX="$(blobPrefix)"
            SRC_DIR="$(Build.ArtifactStagingDirectory)"

            echo "Storage account : $ACCOUNT"
            echo "Container       : $CONTAINER"
            echo "Prefix          : $PREFIX"
            echo "Source dir      : $SRC_DIR"

            echo "Ensuring container exists..."
            az storage container create \
              --account-name "$ACCOUNT" \
              --name "$CONTAINER" \
              --auth-mode login >/dev/null

            echo "Uploading files (RBAC)..."
            az storage blob upload-batch \
              --account-name "$ACCOUNT" \
              --destination "$CONTAINER" \
              --destination-path "$PREFIX" \
              --source "$SRC_DIR" \
              --auth-mode login \
              --overwrite

            echo "Done: https://${ACCOUNT}.blob.core.windows.net/${CONTAINER}/${PREFIX}/"