trigger: none
pr: none

resources:
  pipelines:
    - pipeline: ciPipeline
      source: Thivagar007.HTS-L2-CS002
      trigger: true

variables:
  - group: kv-secrets
  - group: deployment-settings
  - name: startupScriptName
    value: 'startup.sh'
  - name: artifactName
    value: 'flask-app.zip'  # Updated to match your container
  - name: blobPrefix
    value: ''  # Empty since files are at container root
  - name: retryCount
    value: 3
  - name: retryDelaySeconds
    value: 5

pool:
  name: my-agent-2

stages:
- stage: ValidateVariables
  displayName: "Validate Configuration"
  jobs:
  - job: Validate
    displayName: "Check Required Variables"
    steps:
    - task: Bash@3
      displayName: "Verify Variable Group Contents"
      inputs:
        targetType: 'inline'
        script: |
          set -eo pipefail
          
          required_vars=(
            "StorageAccountSasToken"
            "PrimaryVmPassword"
            "PrimaryVmlp"
            "storageAccountName"
            "storageContainer"
          )
          
          missing_vars=()
          for var in "${required_vars[@]}"; do
            if [ -z "${!var+x}" ]; then
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -gt 0 ]; then
            echo "##[error]Missing required variables:"
            printf "##[error]- %s\n" "${missing_vars[@]}"
            exit 1
          fi
          
          echo "##[section]All required variables are present"

- stage: DeployToPrimary
  displayName: "Deploy to Primary VM"
  dependsOn: ValidateVariables
  jobs:
  - job: Deployment
    displayName: "Execute Deployment"
    steps:
    - task: Bash@3
      displayName: "Install Dependencies"
      inputs:
        targetType: 'inline'
        script: |
          set -euxo pipefail
          sudo apt-get update -y
          sudo apt-get install -y openssh-client sshpass curl jq

    - task: Bash@3
      displayName: "Validate Storage Access"
      inputs:
        targetType: 'inline'
        script: |
          set -euxo pipefail
          SAS="$(StorageAccountSasToken)"
          
          # Normalize SAS token
          [[ "$SAS" != \?* ]] && SAS="?${SAS}"
          
          BASE_URL="https://$(storageAccountName).blob.core.windows.net"
          CONTAINER_URL="${BASE_URL}/$(storageContainer)"
          
          # Verify container access
          echo "Checking container access..."
          status_code=$(curl -s -o /dev/null -w "%{http_code}" "${CONTAINER_URL}?restype=container${SAS}")
          if [ "$status_code" != "200" ]; then
            echo "##[error]Container access failed (HTTP $status_code)"
            exit 1
          fi
          
          # Verify files exist (no blobPrefix needed)
          for file in "$(startupScriptName)" "$(artifactName)"; do
            echo "Checking $file..."
            status_code=$(curl -s -o /dev/null -w "%{http_code}" "${CONTAINER_URL}/${file}${SAS}")
            if [ "$status_code" != "200" ]; then
              echo "##[error]$file not found (HTTP $status_code)"
              exit 1
            fi
          done
          
          echo "##[section]All storage resources verified"

    - task: Bash@3
      displayName: "Execute Remote Deployment"
      inputs:
        targetType: 'inline'
        script: |
          set -euxo pipefail
          SAS="$(StorageAccountSasToken)"
          [[ "$SAS" != \?* ]] && SAS="?${SAS}"
          
          # Generate temporary SSH key pair
          KEY_FILE="$(Build.StagingDirectory)/deploy_key"
          ssh-keygen -t rsa -b 4096 -f "$KEY_FILE" -N "" -q
          
          # Configure SSH
          SSH_OPTS=(
            "-o StrictHostKeyChecking=no"
            "-o UserKnownHostsFile=/dev/null"
            "-o LogLevel=ERROR"
            "-i $KEY_FILE"
          )
          
          # Copy public key to VM
          echo "Configuring SSH access..."
          sshpass -p "$(PrimaryVmPassword)" ssh-copy-id \
            "${SSH_OPTS[@]}" \
            "$(PrimaryVmUser)@$(PrimaryVmlp)"
          
          # Execute remote deployment
          echo "Starting deployment..."
          ssh "${SSH_OPTS[@]}" \
            "$(PrimaryVmUser)@$(PrimaryVmlp)" \
            bash -s -- "$SAS" "$(storageAccountName)" "$(storageContainer)" "$(startupScriptName)" "$(artifactName)" <<'REMOTE_SCRIPT'
          set -euxo pipefail
          
          # Parameters
          SAS="${1}"
          ACCOUNT="${2}"
          CONTAINER="${3}"
          SCRIPT="${4}"
          ARTIFACT="${5}"
          
          # Setup
          TEMP_DIR="/tmp/deployment-$(date +%s)"
          mkdir -p "$TEMP_DIR"
          
          # Install dependencies if missing
          if ! command -v curl >/dev/null || ! command -v unzip >/dev/null; then
            sudo apt-get update && sudo apt-get install -y curl unzip
          fi
          
          # Download files with retries
          download_with_retry() {
            local url="$1"
            local output="$2"
            for attempt in {1..3}; do
              if curl -sSL -o "$output" "$url"; then
                return 0
              fi
              sleep 5
            done
            echo "##[error]Failed to download after 3 attempts"
            exit 1
          }
          
          # Download files directly from container root
          BASE_URL="https://${ACCOUNT}.blob.core.windows.net/${CONTAINER}"
          
          echo "Downloading ${SCRIPT}..."
          download_with_retry "${BASE_URL}/${SCRIPT}${SAS}" "${TEMP_DIR}/startup.sh"
          chmod +x "${TEMP_DIR}/startup.sh"
          
          echo "Downloading ${ARTIFACT}..."
          download_with_retry "${BASE_URL}/${ARTIFACT}${SAS}" "${TEMP_DIR}/app.zip"
          
          # Execute deployment
          echo "Running deployment script..."
          "${TEMP_DIR}/startup.sh" "${TEMP_DIR}/app.zip"
          
          # Cleanup
          rm -rf "$TEMP_DIR"
          echo "##[section]Deployment completed successfully"
          REMOTE_SCRIPT
          
          # Cleanup temporary key
          rm -f "${KEY_FILE}" "${KEY_FILE}.pub"