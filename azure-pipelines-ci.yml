trigger:
  branches:
    include:
      - main

# This matches your current setup
pool:
  name: my-agent-2   # VMSS-based agent pool

variables:
  # Variable groups you already use
  - group: kv-secrets            # must include: StorageAccountSasToken
  - group: deployment-settings   # must include: storageAccountName, storageContainer

  # Local variables
  - name: buildDir
    value: 'build-artifacts'
  - name: artifactName
    value: 'flask-app.zip'
  - name: blobPrefix
    value: 'flask/$(Build.SourceBranchName)/$(Build.BuildNumber)'

stages:
- stage: Build
  displayName: 'Build & Package'
  jobs:
  - job: Build
    displayName: 'Zip Flask app and publish'
    steps:
      - script: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y zip
          echo "Preparing build dir: $(buildDir)"
          rm -rf "$(buildDir)"
          mkdir -p "$(buildDir)"

          # Zip only the app assets we need on the VM
          zip -r "$(buildDir)/$(artifactName)" app.py templates static

          # (Optional) generate a minimal requirements.txt if not present
          if [ ! -f requirements.txt ]; then
            echo "flask" > "$(buildDir)/requirements.txt"
          else
            cp requirements.txt "$(buildDir)/requirements.txt"
          fi

          # Manifest to help CD & audits
          cat > "$(buildDir)/artifact-info.json" <<EOF
          {
            "app":"flask-tictactoe",
            "artifact":"$(artifactName)",
            "branch":"$(Build.SourceBranchName)",
            "buildId":"$(Build.BuildId)",
            "buildNumber":"$(Build.BuildNumber)",
            "blobPrefix":"$(blobPrefix)",
            "storageAccount":"$(storageAccountName)",
            "container":"$(storageContainer)"
          }
          EOF

          ls -la "$(buildDir)"
        displayName: 'Create zip + manifest'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact to pipeline'
        inputs:
          PathtoPublish: '$(buildDir)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

- stage: UploadToBlob
  displayName: 'Upload to Azure Blob'
  dependsOn: Build
  jobs:
  - job: Upload
    steps:
      # 1) Get the files produced in Build stage
      - task: DownloadBuildArtifacts@0
        displayName: 'Download build artifact'
        inputs:
          buildType: current
          downloadType: single
          artifactName: 'drop'
          downloadPath: '$(Pipeline.Workspace)/drop'

      # 2) Upload with SAS + temporary firewall allow
      - task: AzureCLI@2
        displayName: 'Upload zip + manifest to Blob (SAS) with temporary firewall allow'
        inputs:
          azureSubscription: 'HTS-L2-CS002-ARM-SC'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            set -euo pipefail

            ACCOUNT="$(storageAccountName)"
            CONTAINER="$(storageContainer)"
            PREFIX="$(blobPrefix)"
            SRC_DIR="$(Pipeline.Workspace)/drop"
            SAS="$(StorageAccountSasToken)"

            echo "Resolving resource group for $ACCOUNT..."
            RG=$(az storage account show -n "$ACCOUNT" --query resourceGroup -o tsv)

            # agent public IP
            AGENT_IP=$(curl -s https://ifconfig.me || curl -s https://api.ipify.org || curl -s http://whatismyip.akamai.com)
            [ -z "$AGENT_IP" ] && { echo "##vso[task.logissue type=error]Could not determine agent public IP"; exit 1; }
            echo "Agent public IP: $AGENT_IP"

            echo "Temporarily allowing IP on storage firewall..."
            az storage account network-rule add -g "$RG" -n "$ACCOUNT" --ip-address "$AGENT_IP" >/dev/null || true
            sleep 5

            cleanup() {
              echo "Removing temporary firewall IP allow..."
              az storage account network-rule remove -g "$RG" -n "$ACCOUNT" --ip-address "$AGENT_IP" >/dev/null || true
            }
            trap cleanup EXIT

            echo "Ensuring container exists..."
            az storage container create \
              --account-name "$ACCOUNT" \
              --name "$CONTAINER" \
              --sas-token "$SAS" >/dev/null

            echo "Uploading to ${PREFIX}/ ..."
            az storage blob upload \
              --account-name "$ACCOUNT" \
              --container-name "$CONTAINER" \
              --name "${PREFIX}/$(artifactName)" \
              --file "${SRC_DIR}/$(artifactName)" \
              --sas-token "$SAS" \
              --overwrite

            az storage blob upload \
              --account-name "$ACCOUNT" \
              --container-name "$CONTAINER" \
              --name "${PREFIX}/artifact-info.json" \
              --file "${SRC_DIR}/artifact-info.json" \
              --sas-token "$SAS" \
              --overwrite

            az storage blob upload \
              --account-name "$ACCOUNT" \
              --container-name "$CONTAINER" \
              --name "${PREFIX}/requirements.txt" \
              --file "${SRC_DIR}/requirements.txt" \
              --sas-token "$SAS" \
              --overwrite

            echo "Done:"
            echo "https://${ACCOUNT}.blob.core.windows.net/${CONTAINER}/${PREFIX}/"