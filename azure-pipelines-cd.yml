trigger: none
pr: none

resources:
  pipelines:
    - pipeline: ciPipeline
      source: Thivagar007.HTS-L2-CS002
      trigger: true

variables:
  - group: kv-secrets
  - group: deployment-settings
  - name: startupScriptName
    value: 'startup.sh'
  - name: blobPrefix
    value: 'deployment'  # Added since not in your variable groups
  - name: artifactName
    value: 'app-bundle.zip'  # Added since not in your variable groups
  - name: retryCount
    value: 3
  - name: retryDelaySeconds
    value: 5

pool:
  name: my-agent-2

stages:
- stage: ValidateVariables
  displayName: "Validate Configuration"
  jobs:
  - job: Validate
    displayName: "Check Required Variables"
    steps:
    - task: Bash@3
      displayName: "Verify Variable Group Contents"
      inputs:
        targetType: 'inline'
        script: |
          set -euxo pipefail
          
          # Verify required variables are set
          required_vars=(
            "StorageAccountSasToken"
            "PrimaryVmPassword"
            "PrimaryVmlp"
            "storageAccountName"
            "storageContainer"
            "resourceGroup"
          )
          
          missing_vars=()
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -gt 0 ]; then
            echo "##[error]Missing required variables:"
            printf "##[error]- %s\n" "${missing_vars[@]}"
            exit 1
          fi
          
          echo "##[section]All required variables are present"

- stage: DeployToPrimary
  displayName: "Deploy to Primary VM"
  dependsOn: ValidateVariables
  jobs:
  - job: Deployment
    displayName: "Execute Deployment"
    steps:
    - task: Bash@3
      displayName: "Install Dependencies"
      inputs:
        targetType: 'inline'
        script: |
          set -euxo pipefail
          sudo apt-get update -y
          sudo apt-get install -y openssh-client sshpass curl jq

    - task: Bash@3
      displayName: "Validate Storage Access"
      inputs:
        targetType: 'inline'
        script: |
          set -euxo pipefail
          SAS="$(StorageAccountSasToken)"
          
          # Normalize SAS token
          [[ "$SAS" != \?* ]] && SAS="?${SAS}"
          echo "##[debug]SAS token normalized"
          
          BASE_URL="https://$(storageAccountName).blob.core.windows.net"
          CONTAINER_URL="${BASE_URL}/$(storageContainer)"
          
          # Function to validate storage access
          validate_storage_access() {
            local url=$1
            local resource=$2
            local attempt=1
            
            while [ $attempt -le $(retryCount) ]; do
              status_code=$(curl -s -o /dev/null -w "%{http_code}" "${url}${SAS}")
              
              case $status_code in
                200) echo "OK: $resource accessible"; return 0 ;;
                404) echo "##[error]$resource not found"; return 1 ;;
                403) echo "##[error]Access denied to $resource"; return 1 ;;
                *)   echo "##[warning]$resource check failed (HTTP $status_code)" ;;
              esac
              
              sleep $(retryDelaySeconds)
              ((attempt++))
            done
            
            echo "##[error]All attempts failed for $resource"
            return 1
          }
          
          # Validate container access
          validate_storage_access "${CONTAINER_URL}?restype=container" "Storage Container" || exit 1
          
          # Validate startup script exists
          validate_storage_access "${CONTAINER_URL}/$(blobPrefix)/$(startupScriptName)" "Startup Script" || exit 1
          
          # Validate artifact exists
          validate_storage_access "${CONTAINER_URL}/$(blobPrefix)/$(artifactName)" "Deployment Artifact" || exit 1

    - task: Bash@3
      displayName: "Execute Remote Deployment"
      inputs:
        targetType: 'inline'
        script: |
          set -euxo pipefail
          SAS="$(StorageAccountSasToken)"
          [[ "$SAS" != \?* ]] && SAS="?${SAS}"
          
          # Generate temporary SSH key pair
          KEY_FILE="$(Build.StagingDirectory)/deploy_key"
          ssh-keygen -t rsa -b 4096 -f "$KEY_FILE" -N "" -q
          
          # Configure SSH for the session
          SSH_OPTS=(
            "-o StrictHostKeyChecking=no"
            "-o UserKnownHostsFile=/dev/null"
            "-o LogLevel=ERROR"
            "-i $KEY_FILE"
          )
          
          # Copy public key to VM
          echo "Configuring SSH access..."
          sshpass -p "$(PrimaryVmPassword)" ssh-copy-id \
            "${SSH_OPTS[@]}" \
            "$(PrimaryVmUser)@$(PrimaryVmlp)"
          
          # Execute remote deployment script
          echo "Starting remote deployment..."
          ssh "${SSH_OPTS[@]}" \
            "$(PrimaryVmUser)@$(PrimaryVmlp)" \
            bash -s -- "$SAS" "$(storageAccountName)" "$(storageContainer)" "$(blobPrefix)" "$(startupScriptName)" "$(artifactName)" <<'REMOTE_SCRIPT'
          set -euxo pipefail
          
          # Parameters from Azure Pipelines
          SAS="${1}"
          ACCOUNT="${2}"
          CONTAINER="${3}"
          PREFIX="${4}"
          SCRIPT="${5}"
          ARTIFACT="${6}"
          
          # System configuration
          TEMP_DIR="/tmp/deployment-$(date +%s)"
          mkdir -p "$TEMP_DIR"
          
          # Install required packages
          if ! command -v curl >/dev/null || ! command -v unzip >/dev/null; then
            echo "Installing dependencies..."
            sudo apt-get update && sudo apt-get install -y curl unzip
          fi
          
          # Download function with retries
          download_with_retry() {
            local url="$1"
            local output="$2"
            local max_attempts=3
            local delay=5
            
            for ((attempt=1; attempt<=max_attempts; attempt++)); do
              if curl -sSL -o "$output" "${url}${SAS}"; then
                echo "Download successful"
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $delay seconds..."
              sleep $delay
            done
            echo "##[error]Failed to download after $max_attempts attempts"
            return 1
          }
          
          # Download and execute startup script
          echo "Downloading startup script..."
          download_with_retry \
            "https://${ACCOUNT}.blob.core.windows.net/${CONTAINER}/${PREFIX}/${SCRIPT}" \
            "${TEMP_DIR}/startup.sh" || exit 1
          
          chmod +x "${TEMP_DIR}/startup.sh"
          
          # Download artifact
          echo "Downloading application artifact..."
          download_with_retry \
            "https://${ACCOUNT}.blob.core.windows.net/${CONTAINER}/${PREFIX}/${ARTIFACT}" \
            "${TEMP_DIR}/artifact.zip" || exit 1
          
          # Execute deployment
          echo "Starting deployment process..."
          "${TEMP_DIR}/startup.sh" \
            "$SAS" \
            "$ACCOUNT" \
            "$CONTAINER" \
            "$PREFIX" \
            "$ARTIFACT"
          
          # Cleanup
          rm -rf "$TEMP_DIR"
          echo "##[section]Deployment completed successfully"
          REMOTE_SCRIPT
          
          # Cleanup temporary key
          rm -f "${KEY_FILE}" "${KEY_FILE}.pub"